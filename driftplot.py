#!/usr/bin/env python3
#
# driftplot.py: Plot drift logs generated by SigDigger
# Copyright (c) 2024 Gonzalo Jos√© Carracedo Carballal
#
# dsn-tools is free software: you can redistribute it and/or modify it under the 
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later 
# version.
#
# dsn-tools is distributed in the hope that it will be useful, but WITHOUT ANY 
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR 
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with 
# dsn-tools. If not, see <https://www.gnu.org/licenses/>.
#

import sys
import numpy as np
import matplotlib.pyplot as plt

plt.rcParams["font.family"] = "Helvetica"

SHIFT_COLOR = 'blue'
DRIFT_COLOR = 'green'
NOLOCK_COLOR = 'red'
UNSTABLE_COLOR = '#ee8000'

OPTIONS = {
    'skip' : 0,
}

def plot_logfile(path, skip = 0):
    try:
        data = np.loadtxt(path, delimiter = ',')
        tt  = (data[skip:, 0] - data[0, 0]) * 86400

        units = 1
        unitName = 'seconds'
        
        ttlen = tt[-1] - tt[0]

        if ttlen > 86400:
            units = 86400
            unitName = 'days'
        elif ttlen > 3600:
            units = 3600
            unitName = 'hours'
        elif ttlen > 90:
            units = 60
            unitName = 'minutes'

        tt /= units
        
        ttc = .5 * (tt[1:] + tt[:-1])
        shift = data[skip:, 5]
        lock  = data[skip:, 2]
        stable  = data[skip:, 3]
        drift = np.diff(shift) / (86400 * np.diff(data[skip:, 0]))
    except RuntimeError as e:
        print(fr'{path}: log format error')
        return

    plt.figure(figsize=(10, 5))
    ax_drift = plt.gca()
    ax_shift = ax_drift.twinx()

    linewidth = 750 / len(tt)
    if linewidth > 2:
        linewidth = 2

    ax_drift.plot(ttc, drift, color = DRIFT_COLOR, linewidth = linewidth)

    ax_drift.set_ylabel('Droppler drift [Hz/s]', color = DRIFT_COLOR)
    
    ma_len = len(drift) // 100
    if ma_len > 10:
        ma_kernel = np.ones(ma_len) / ma_len
        ma_tt     = np.convolve(ttc, ma_kernel, 'valid')
        ma_drift  = np.convolve(drift, ma_kernel, 'valid')
        ma_dt     = ttc[ma_len] - ttc[0]
        
        ax_drift.plot(ma_tt, ma_drift, color = DRIFT_COLOR, linewidth = 1, label = fr'Moving average ({ma_dt:.2g} {unitName})')
        ax_drift.legend(loc = 'lower left')
        
    driftmean = np.mean(drift)
    driftlim = 1.25 * np.quantile(np.abs(drift-driftmean), 0.75)
    ax_drift.set_ylim([driftmean -driftlim, driftmean + driftlim])

    unlock = np.where(lock < 1)
    unstable = np.where(stable < 1)
    
    ax_shift.scatter(tt, shift, 14, color = SHIFT_COLOR, label = 'Locked and stable', zorder = 9)

    ax_shift.scatter(tt[unstable], shift[unstable], 16, color = UNSTABLE_COLOR, zorder=10, label = 'Locked, unstable')
    
    ax_shift.scatter(tt[unlock], shift[unlock], 18, color = NOLOCK_COLOR, zorder = 11, label = 'Unlocked')
    
    
    ax_shift.set_ylabel('Doppler shift [Hz]', color = SHIFT_COLOR)
    ax_drift.set_xlabel(fr'Time since start [{unitName}]')
    
    ax_drift.grid(True, zorder=-10)
    ax_drift.tick_params(axis = 'y', color = DRIFT_COLOR)
    [t.set_color(DRIFT_COLOR) for t in ax_drift.yaxis.get_ticklabels()]
    
    ax_shift.tick_params(axis = 'y', color = SHIFT_COLOR)
    [t.set_color(SHIFT_COLOR) for t in ax_shift.yaxis.get_ticklabels()]

    plt.legend()
    plt.title(path)
    plt.tight_layout()
    
argc = len(sys.argv)

if argc < 2:
    print(fr'Usage: {sys.argv[0]} file1.log [file2.log [...]]')
    sys.exit(1)


skip = 0
option_name = None

for i in range(len(sys.argv) - 1):
    arg = sys.argv[i + 1]

    if option_name is not None:
        if option_name not in OPTIONS:
            print(fr'{sys.argv[0]}: unrecognized option `{option_name}`')
            sys.exit(1)

        try:
            if type(OPTIONS[option_name]) is int:
                OPTIONS[option_name] = int(arg)
            elif type(OPTIONS[option_name]) is float:
                OPTIONS[option_name] = float(arg)
            elif type(OPTIONS[option_name]) is str:
                OPTIONS[option_name] = arg
            else:
                raise RuntimeError
        except:
            print(fr'{sys.argv[0]}: invalid type for {option_name}')
            sys.exit(1)
        
        option_name = None

    elif arg[0] == '-':
        option_name = arg[1:]
    else:
        plot_logfile(arg, OPTIONS['skip'])

plt.show()
